{% extends "main.html.twig" %}

{% block main %}
    <form action="#" method="post" role="form">
        <fieldset>
            <p><strong>Environment:</strong> {{ environment }}<br />
            <input type="submit" name="oauth" value="OAuth Login" class="btn btn-primary"{% if session.token is defined %} disabled{% endif %} />
            <input type="submit" name="reset" value="Clear OAuth Token" class="btn btn-warning" />
        </fieldset>
    </form>
    {% if session.token is defined %}
        <div class="alert alert-secondary" role="alert">
            <h4>Token information <small>(<a href="https://api.groundspeak.com/api-docs/index">Swagger</a>)</small></h4>
            <ul id="tokenInformation">
                <li>Access Token:
                    <code title="length = {{ session.token.getToken()|length }}" style="overflow-wrap: break-word;">{{ session.token.getToken() }}</code>
                </li>
                <li>Refresh Token:
                    <code title="length = {{ session.token.getRefreshToken()|length }}">{{ session.token.getRefreshToken() }}</code>
                </li>
                <li>Expiration time:
                    <code title="Timestamp: {{ session.token.getExpires() }}">{{ session.token.getExpires()|date('r') }}</code>
                    <a href="?refresh" class="btn btn-secondary btn-sm">Refresh the token</a>
                </li>
            </ul>
            <hr />
            <h4>User information</h4>
            <ul>
                <li><a href="{{ session.resourceOwner.getProfileUrl() }}">{{ session.resourceOwner.getUsername() }}</a> ({{ session.resourceOwner.getId() }}) &bullet; Membership Level: {{ session.resourceOwner.getMembershipLevelId() }}</li>
                <li>Hide: {{ session.resourceOwner.getHideCount() }} &bullet; Found: {{ session.resourceOwner.getFindCount() }} &bullet; FP: {{ session.resourceOwner.getFavoritePoints() }}</li>
            </ul>
        </div>
    {% endif %}

    {% if http_debug is defined %}
        <div class="alert alert-info" role="alert">
            <h4><span>Http Log</span> <button type="button" class="btn btn-sm btn-info">Show</button></h4>
            <pre class="hide">{{ http_debug }}</pre>
        </div>
    {% endif %}

    {% if exception is defined %}
        <div class="alert alert-warning" role="alert">
            <h4>{{ exception.type }}</h4>
            <strong>Message:</strong> <code>{{ exception.message }}</code><br />
            {% if exception.code is defined %}<strong>Code:</strong> <code>{{ exception.code }}</code><br />{% endif %}
            {% if exception.context is defined %}<strong>Context:</strong> <button type="button" class="btn btn-sm btn-warning">Show</button>
            <pre class="hide">{{ exception.context|print_r }}</pre><br />{% endif %}
            {% if exception.trace is defined %}<strong>Trace:</strong> <button type="button" class="btn btn-sm btn-warning">Show</button>
            <pre class="hide">{{ exception.trace }}</pre>{% endif %}
        </div>
    {% endif %}

    {% if response is defined %}
        <div class="alert alert-success">
            <h4><span>Headers</span> <button type="button" class="btn btn-sm btn-success">Show</button></h4>
            <pre class="hide">{{ response.headers|print_r }}</pre>

            <h4><span>Response</span> <button type="button" class="btn btn-sm btn-success">Hide</button></h4>
            <pre class="show">Status Code: {{ response.statusCode }}
                <br />
                {{- response.body|print_r }}</pre>
        </div>
    {% endif %}
{% endblock %}

{% block javascript %}
<script>
    Object.assign(String.prototype, {
        toggleText(a, b) {
            return this.toString() == b ? a : b;
        }
    });

    document.querySelectorAll('h4 button').forEach(elm => {
        elm.addEventListener('click', (e) => {
            elm = e.target.nextElementSibling || e.target.parentNode.nextElementSibling
            if (elm.classList.contains("show")) {
                elm.classList.replace("show", "hide")
            } else {
                elm.classList.replace("hide", "show")
            }
            e.target.textContent = e.target.textContent.toggleText('Show', 'Hide')
        })
    })
</script>
{% endblock %}
